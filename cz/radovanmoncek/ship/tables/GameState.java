// automatically generated by the FlatBuffers compiler, do not modify

package cz.radovanmoncek.ship.tables;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 *Reponse to players
 */
@SuppressWarnings("unused")
public final class GameState extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static GameState getRootAsGameState(ByteBuffer _bb) { return getRootAsGameState(_bb, new GameState()); }
  public static GameState getRootAsGameState(ByteBuffer _bb, GameState obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameMetadata gameMetadata() { return gameMetadata(new GameMetadata()); }
  public GameMetadata gameMetadata(GameMetadata obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Player players(int j) { return players(new Player(), j); }
  public Player players(Player obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playersLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Player.Vector playersVector() { return playersVector(new Player.Vector()); }
  public Player.Vector playersVector(Player.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public Position bullets(int j) { return bullets(new Position(), j); }
  public Position bullets(Position obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 12, bb) : null; }
  public int bulletsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Position.Vector bulletsVector() { return bulletsVector(new Position.Vector()); }
  public Position.Vector bulletsVector(Position.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 12, bb) : null; }

  public static int createGameState(FlatBufferBuilder builder,
      int gameMetadataOffset,
      int playersOffset,
      int bulletsOffset) {
    builder.startTable(3);
    GameState.addBullets(builder, bulletsOffset);
    GameState.addPlayers(builder, playersOffset);
    GameState.addGameMetadata(builder, gameMetadataOffset);
    return GameState.endGameState(builder);
  }

  public static void startGameState(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addGameMetadata(FlatBufferBuilder builder, int gameMetadataOffset) { builder.addOffset(0, gameMetadataOffset, 0); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(1, playersOffset, 0); }
  public static int createPlayersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBullets(FlatBufferBuilder builder, int bulletsOffset) { builder.addOffset(2, bulletsOffset, 0); }
  public static void startBulletsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(12, numElems, 4); }
  public static int endGameState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameState get(int j) { return get(new GameState(), j); }
    public GameState get(GameState obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

