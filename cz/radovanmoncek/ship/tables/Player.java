// automatically generated by the FlatBuffers compiler, do not modify

package cz.radovanmoncek.ship.tables;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 *The Player entity
 */
@SuppressWarnings("unused")
public final class Player extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static Player getRootAsPlayer(ByteBuffer _bb) { return getRootAsPlayer(_bb, new Player()); }
  public static Player getRootAsPlayer(ByteBuffer _bb, Player obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Position position() { return position(new Position()); }
  public Position position(Position obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte character() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static void startPlayer(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(0, positionOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addCharacter(FlatBufferBuilder builder, byte character) { builder.addByte(2, character, 0); }
  public static int endPlayer(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Player get(int j) { return get(new Player(), j); }
    public Player get(Player obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

